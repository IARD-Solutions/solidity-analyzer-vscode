import * as vscode from 'vscode';
import { Vulnerability } from '../models/types';

/**
 * Processes raw vulnerability data from the API into a standardized format.
 * 
 * @param apiResult The raw vulnerability data from the API
 * @returns An array of processed vulnerabilities
 */
export function handleVulnerabilities(apiResult: any[]): Vulnerability[] {
    const vulnerabilities: Vulnerability[] = [];
    
    apiResult.forEach((vuln, index) => {
        // Generate a unique ID if not provided
        if (!vuln.id) {
            vuln.id = `vuln-${Date.now()}-${index}`;
        }
        
        // Process and transform the vulnerability data as needed
        vulnerabilities.push({
            id: vuln.id,
            // Ensure check is set (required by Vulnerability interface)
            check: vuln.check || vuln.title || `Vulnerability-${index}`,
            title: vuln.title || vuln.check || 'Unnamed Vulnerability',
            description: vuln.description || 'No description provided',
            impact: vuln.impact || 'Medium',
            confidence: vuln.confidence || 'Medium',
            category: vuln.category || 'Unknown',
            function: vuln.function || '',
            detector: vuln.detector || '',
            lines: vuln.lines || []
        });
    });
    
    const config = vscode.workspace.getConfiguration('solidityAnalyzer');
    const analyzeNodeModules = config.get<boolean>('analyzeNodeModules');

    if (!analyzeNodeModules) {
        vulnerabilities.forEach(vuln => {
            vuln.description = vuln.description
                .split('\n')
                .filter(line => !line.includes('node_modules'))
                .join('\n');
        });
    }

    // Regular expression to extract file and line information from descriptions
    const lineRegex = /([^\s()]+\.sol)#(\d+)(?:-(\d+))?/g;

    return vulnerabilities
        .map(vuln => {
            const lines: { contract: string, lines: number[] }[] = [];
            let match;
            
            while ((match = lineRegex.exec(vuln.description)) !== null) {
                const contract = match[1];
                const startLine = parseInt(match[2], 10);
                const endLine = match[3] ? parseInt(match[3], 10) : startLine;
                const lineNumbers = [];
                
                for (let line = startLine; line <= endLine; line++) {
                    lineNumbers.push(line);
                }
                
                lines.push({ contract, lines: lineNumbers });
            }
            
            vuln.lines = lines;
            return vuln;
        })
        .filter(vuln => vuln.lines && vuln.lines.length > 0);
}
