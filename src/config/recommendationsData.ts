export const check_ids: { [key: string]: string } = {
    "abiencoderv2-array": "storage-abiencoderv2-array",
    "arbitrary-send-erc20": "arbitrary-from-in-transferfrom",
    "array-by-reference": "modifying-storage-array-by-value",
    "encode-packed-collision": "abi-encodePacked-collision",
    "incorrect-shift": "incorrect-shift-in-assembly",
    "multiple-constructors": "multiple-constructor-schemes",
    "name-reused": "name-reused",
    "protected-vars": "protected-variables",
    "public-mappings-nested": "public-mappings-with-nested-variables",
    "rtlo": "right-to-left-override-character",
    "shadowing-state": "state-variable-shadowing",
    "suicidal": "suicidal",
    "uninitialized-state": "uninitialized-state-variables",
    "uninitialized-storage": "uninitialized-storage-variables",
    "unprotected-upgrade": "unprotected-upgradeable-contract",
    "codex": "codex",
    "arbitrary-send-erc20-permit": "arbitrary-from-in-transferfrom-used-with-permit",
    "arbitrary-send-eth": "functions-that-send-ether-to-arbitrary-destinations",
    "controlled-array-length": "array-length-assignment",
    "controlled-delegatecall": "controlled-delegatecall",
    "delegatecall-loop": "payable-functions-using-delegatecall-inside-a-loop",
    "incorrect-exp": "incorrect-exponentiation",
    "incorrect-return": "incorrect-return-in-assembly",
    "msg-value-loop": "msgvalue-inside-a-loop",
    "reentrancy-eth": "reentrancy-vulnerabilities",
    "return-leave": "return-instead-of-leave-in-assembly",
    "storage-array": "storage-signed-integer-array",
    "unchecked-transfer": "unchecked-transfer",
    "weak-prng": "weak-PRNG",
    "domain-separator-collision": "domain-separator-collision",
    "enum-conversion": "dangerous-enum-conversion",
    "erc20-interface": "incorrect-erc20-interface",
    "erc721-interface": "incorrect-erc721-interface",
    "incorrect-equality": "dangerous-strict-equalities",
    "locked-ether": "contracts-that-lock-ether",
    "mapping-deletion": "deletion-on-mapping-containing-a-structure",
    "pyth-deprecated-functions": "pyth-deprecated-functions",
    "pyth-unchecked-confidence": "pyth-unchecked-confidence-level",
    "pyth-unchecked-publishtime": "pyth-unchecked-publishtime",
    "shadowing-abstract": "state-variable-shadowing-from-abstract-contracts",
    "tautological-compare": "tautological-compare",
    "tautology": "tautology-or-contradiction",
    "write-after-write": "write-after-write",
    "boolean-cst": "misuse-of-a-boolean-constant",
    "chronicle-unchecked-price": "chronicle-unchecked-price",
    "constant-function-asm": "constant-functions-using-assembly-code",
    "constant-function-state": "constant-functions-changing-the-state",
    "divide-before-multiply": "divide-before-multiply",
    "gelato-unprotected-randomness": "gelato-unprotected-randomness",
    "out-of-order-retryable": "out-of-order-retryable-transactions",
    "reentrancy-no-eth": "reentrancy-vulnerabilities-1",
    "reused-constructor": "reused-base-constructors",
    "tx-origin": "dangerous-usage-of-txorigin",
    "unchecked-lowlevel": "unchecked-low-level-calls",
    "unchecked-send": "unchecked-send",
    "uninitialized-local": "uninitialized-local-variables",
    "unused-return": "unused-return",
    "chainlink-feed-registry": "chainlink-feed-registry-usage",
    "incorrect-modifier": "incorrect-modifier",
    "optimism-deprecation": "optimism-deprecated-predeploy-or-function",
    "shadowing-builtin": "builtin-symbol-shadowing",
    "shadowing-local": "local-variable-shadowing",
    "uninitialized-fptr-cst": "uninitialized-function-pointers-in-constructors",
    "variable-scope": "pre-declaration-usage-of-local-variables",
    "void-cst": "void-constructor",
    "calls-loop": "calls-inside-a-loop",
    "events-access": "missing-events-access-control",
    "events-maths": "missing-events-arithmetic",
    "incorrect-unary": "dangerous-unary-expressions",
    "missing-zero-check": "missing-zero-address-validation",
    "reentrancy-benign": "reentrancy-vulnerabilities-2",
    "reentrancy-events": "reentrancy-vulnerabilities-3",
    "return-bomb": "return-bomb",
    "timestamp": "block-timestamp",
    "assembly": "assembly-usage",
    "assert-state-change": "assert-state-change",
    "boolean-equal": "boolean-equality",
    "cyclomatic-complexity": "cyclomatic-complexity",
    "deprecated-standards": "deprecated-standards",
    "erc20-indexed": "unindexed-erc20-event-parameters",
    "function-init-state": "function-initializing-state",
    "incorrect-using-for": "incorrect-using-for-usage",
    "low-level-calls": "low-level-calls",
    "missing-inheritance": "missing-inheritance",
    "naming-convention": "conformance-to-solidity-naming-conventions",
    "pragma": "different-pragma-directives-are-used",
    "redundant-statements": "redundant-statements",
    "solc-version": "incorrect-versions-of-solidity",
    "unimplemented-functions": "unimplemented-functions",
    "unused-state": "unused-state-variable",
    "costly-loop": "costly-operations-inside-a-loop",
    "dead-code": "dead-code",
    "reentrancy-unlimited-gas": "reentrancy-vulnerabilities-4",
    "too-many-digits": "too-many-digits",
    "cache-array-length": "cache-array-length",
    "constable-states": "state-variables-that-could-be-declared-constant",
    "external-function": "public-function-that-could-be-declared-external",
    "immutable-states": "state-variables-that-could-be-declared-immutable",
    "var-read-using-this": "public-variable-read-in-external-context"
};

export const check_recommendations: { [key: string]: string } = {
    "abiencoderv2-array": "Use a compiler >= `0.5.10`.",
    "arbitrary-send-erc20": "Use `msg.sender` as `from` in transferFrom.",
    "array-by-reference": "Ensure the correct usage of `memory` and `storage` in the function parameters. Make all the locations explicit.",
    "encode-packed-collision": "Do not use more than one dynamic type in `abi.encodePacked()` (see the <a style=\"color: #E57373;\" href=\"https://solidity.readthedocs.io/en/v0.5.10/abi-spec.html?highlight=abi.encodePacked#non-standard-packed-modeDynamic\" target=\"_blank\" rel=\"nofollow noopener\">Solidity documentation</a>). Use `abi.encode()`, preferably.",
    "incorrect-shift": "Swap the order of parameters.",
    "multiple-constructors": "Only declare one constructor, preferably using the new scheme `constructor(...)` instead of `function <contractName>(...)`.",
    "name-reused": "Rename the contract.",
    "protected-vars": "Add access controls to the vulnerable function.",
    "public-mappings-nested": "Do not use public mapping with nested structures.",
    "rtlo": "Special control characters must not be allowed.",
    "state-variable-shadowing": "Remove the state variable shadowing.",
    "suicidal": "Protect access to all sensitive functions.",
    "uninitialized-state": "Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability.",
    "uninitialized-storage": "Initialize all storage variables.",
    "unprotected-upgrade": "Add a constructor to ensure `initialize` cannot be called on the logic contract.",
    "arbitrary-send-erc20-permit": "Ensure that the underlying ERC20 token correctly implements a permit function.",
    "arbitrary-send-eth": "Ensure that an arbitrary user cannot withdraw unauthorized funds.",
    "controlled-array-length": "Do not allow array lengths to be set directly; instead, opt to add values as needed. Otherwise, thoroughly review the contract to ensure a user-controlled variable cannot reach an array length assignment.",
    "controlled-delegatecall": "Avoid using `delegatecall`. Use only trusted destinations.",
    "delegatecall-loop": "Carefully check that the function called by `delegatecall` is not payable/doesn't use `msg.value`.",
    "incorrect-exp": "Use the correct operator `**` for exponentiation.",
    "incorrect-return": "Use the `leave` statement.",
    "msg-value-loop": "Provide an explicit array of amounts alongside the receivers array, and check that the sum of all amounts matches `msg.value`.",
    "reentrancy-eth": "Apply the <a style=\"color: #E57373;\" href=\"http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy\" target=\"_blank\" rel=\"nofollow noopener\">`check-effects-interactions` pattern</a>.",
    "return-leave": "Use the `leave` statement.",
    "storage-array": "Use a compiler version >= `0.5.10`.",
    "unchecked-transfer": "Use `SafeERC20`, or ensure that the transfer/transferFrom return value is checked.",
    "weak-prng": "Do not use `block.timestamp`, `now` or `blockhash` as a source of randomness.",
    "codex": "Review codex's message.",
    "domain-separator-collision": "Remove or rename the function that collides with DOMAIN_SEPARATOR().",
    "enum-conversion": "Use a recent compiler version. If `solc` <`0.4.5` is required, check the `enum` conversion range.",
    "erc20-interface": "Set the appropriate return values and types for the defined `ERC20` functions.",
    "erc721-interface": "Set the appropriate return values and types for the defined `ERC721` functions.",
    "incorrect-equality": "Don't use strict equality to determine if an account has enough Ether or tokens.",
    "locked-ether": "Remove the payable attribute or add a withdraw function.",
    "mapping-deletion": "Use a lock mechanism instead of a deletion to disable structure containing a mapping.",
    "pyth-deprecated-functions": "Do not use deprecated Pyth functions. Visit <a style=\"color: #E57373;\" href=\"https://api-reference.pyth.network/\" target=\"_blank\" rel=\"nofollow noopener\">https://api-reference.pyth.network/</a>.",
    "pyth-unchecked-confidence": "Check the confidence level of a Pyth price. Visit <a style=\"color: #E57373;\" href=\"https://docs.pyth.network/price-feeds/best-practices#confidence-intervals\" target=\"_blank\" rel=\"nofollow noopener\">https://docs.pyth.network/price-feeds/best-practices#confidence-intervals</a> for more information.",
    "pyth-unchecked-publishtime": "Check the publishTime of a Pyth price.",
    "shadowing-abstract": "Remove the state variable shadowing.",
    "tautological-compare": "Remove comparison or compare to different value.",
    "tautology": "Fix the incorrect comparison by changing the value type or the comparison.",
    "write-after-write": "Fix or remove the writes.",
    "boolean-cst": "Verify and simplify the condition.",
    "constant-function-asm": "Ensure the attributes of contracts compiled prior to Solidity 0.5.0 are correct.",
    "constant-function-state": "Ensure that attributes of contracts compiled prior to Solidity 0.5.0 are correct.",
    "divide-before-multiply": "Consider ordering multiplication before division.",
    "out-of-order-retryable": "Do not rely on the order or successful execution of retryable tickets.",
    "reentrancy-no-eth": "Apply the <a style=\"color: #E57373;\" href=\"http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy\" target=\"_blank\" rel=\"nofollow noopener\">`check-effects-interactions` pattern</a>.",
    "reused-constructor": "Remove the duplicate constructor call.",
    "tx-origin": "Do not use `tx.origin` for authorization.",
    "unchecked-lowlevel": "Ensure that the return value of a low-level call is checked or logged.",
    "unchecked-send": "Ensure that the return value of `send` is checked or logged.",
    "uninitialized-local": "Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability.",
    "unused-return": "Ensure that all the return values of the function calls are used.",
    "chainlink-feed-registry": "Do not use Chainlink Feed Registry outside of Ethereum Mainnet.",
    "incorrect-modifier": "All the paths in a modifier must execute `_` or revert.",
    "optimism-deprecation": "Do not use the deprecated components.",
    "shadowing-builtin": "Rename the local variables, state variables, functions, modifiers, and events that shadow a builtin symbol.",
    "shadowing-local": "Rename the local variables that shadow another component.",
    "uninitialized-fptr-cst": "Initialize function pointers before calling. Avoid function pointers if possible.",
    "variable-scope": "Move all variable declarations prior to any usage of the variable, and ensure that reaching a variable declaration does not depend on some conditional if it is used unconditionally. It also may indicate that the user intended to reference a different variable.",
    "void-cst": "Remove the constructor call.",
    "calls-loop": "Favor <a style=\"color: #E57373;\" href=\"https://github.com/ethereum/wiki/wiki/Safety#favor-pull-over-push-for-external-calls\" target=\"_blank\" rel=\"nofollow noopener\">pull over push</a> strategy for external calls.",
    "events-access": "Emit an event for critical parameter changes.",
    "events-maths": "Emit an event for critical parameter changes.",
    "incorrect-unary": "Remove the unary expression.",
    "missing-zero-check": "Check that the address is not zero.",
    "reentrancy-benign": "Apply the <a style=\"color: #E57373;\" href=\"http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy\" target=\"_blank\" rel=\"nofollow noopener\">`check-effects-interactions` pattern</a>.",
    "reentrancy-events": "Apply the <a style=\"color: #E57373;\" href=\"https://docs.soliditylang.org/en/latest/security-considerations.html#re-entrancy\" target=\"_blank\" rel=\"nofollow noopener\">`check-effects-interactions` pattern</a>.",
    "return-bomb": "Avoid unlimited implicit decoding of returndata.",
    "timestamp": "Avoid relying on `block.timestamp`.",
    "assembly": "Do not use `evm` assembly.",
    "assert-state-change": "Use `require` for invariants modifying the state.",
    "boolean-equal": "Remove the equality to the boolean constant.",
    "cyclomatic-complexity": "Reduce cyclomatic complexity by splitting the function into several smaller subroutines.",
    "deprecated-standards": "Replace all uses of deprecated symbols.",
    "erc20-indexed": "Add the `indexed` keyword to event parameters that should include it, according to the `ERC20` specification.",
    "function-init-state": "Remove any initialization of state variables via non-constant state variables or function calls. If variables must be set upon contract deployment, locate initialization in the constructor instead.",
    "incorrect-using-for": "Make sure that the libraries used in `using-for` statements have at least one function matching a type used in these statements.",
    "low-level-calls": "Avoid low-level calls. Check the call success. If the call is meant for a contract, check for code existence.",
    "missing-inheritance": "Inherit from the missing interface or contract.",
    "naming-convention": "Follow the Solidity <a style=\"color: #E57373;\" href=\"https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions\" target=\"_blank\" rel=\"nofollow noopener\">naming convention</a>.",
    "pragma": "Use one Solidity version.",
    "redundant-statements": "Remove redundant statements if they congest code but offer no value.",
    "solc-version": "Deploy with a recent version of Solidity (at least 0.8.0) with no known severe issues. Use a simple pragma version that allows any of these versions. Consider using the latest version of Solidity for testing.",
    "unimplemented-functions": "Implement all unimplemented functions in any contract you intend to use directly (not simply inherit from).",
    "unused-state": "Remove unused state variables.",
    "costly-loop": "Use a local variable to hold the loop computation result.",
    "dead-code": "Remove unused functions.",
    "reentrancy-unlimited-gas": "Apply the <a style=\"color: #E57373;\" href=\"http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy\" target=\"_blank\" rel=\"nofollow noopener\">`check-effects-interactions` pattern</a>.",
    "too-many-digits": "Use: <a  style=\"color: #E57373;\"href=\"https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#ether-units\" target=\"_blank\" rel=\"nofollow noopener\">Ether suffix</a>, <a style=\"color: #E57373;\" href=\"https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#time-units\" target=\"_blank\" rel=\"nofollow noopener\">Time suffix</a>, or <a style=\"color: #E57373;\" href=\"https://solidity.readthedocs.io/en/latest/types.html#rational-and-integer-literals\" target=\"_blank\" rel=\"nofollow noopener\">The scientific notation</a>.",
    "cache-array-length": "Cache the lengths of storage arrays if they are used and not modified in `for` loops.",
    "constable-states": "Add the `constant` attribute to state variables that never change.",
    "external-function": "Use the `external` attribute for functions never called from the contract, and change the location of immutable parameters to `calldata` to save gas.",
    "immutable-states": "Add the `immutable` attribute to state variables that never change or are set only in the constructor.",
    "var-read-using-this": "Read the variable directly from storage instead of calling the contract."
};

export const check_explanations: { [key: string]: string } = {
    "abiencoderv2-array": "A compiler bug in Solidity versions 0.4.7-0.5.9 causes incorrect ABI encoding for arrays of arrays, leading to unintended behavior.",
    "arbitrary-send-erc20": "Allows arbitrary addresses to be specified in transferFrom, enabling unauthorized token transfers.",
    "array-by-reference": "Arrays passed by value instead of reference can lead to incorrect state updates.",
    "encode-packed-collision": "Dynamic type usage in abi.encodePacked can cause hash collisions, compromising data integrity.",
    "incorrect-shift": "Incorrect shift operations in assembly can lead to unexpected behavior and potential security risks.",
    "multiple-constructors": "Multiple constructor definitions can cause unintended behavior due to precedence rules.",
    "name-reused": "Duplicate contract names can lead to compilation issues and missing artifacts.",
    "protected-vars": "Unprotected variables marked as protected can be modified by unauthorized users.",
    "public-mappings-nested": "Public mappings with nested structures can return incorrect values, breaking contract functionality.",
    "rtlo": "Right-to-left override characters can manipulate contract logic, leading to unintended behavior.",
    "shadowing-state": "State variable shadowing can cause incorrect state management and security risks.",
    "suicidal": "Unprotected selfdestruct calls can lead to contract destruction and loss of funds.",
    "uninitialized-state": "Uninitialized state variables can lead to unexpected behavior and potential security risks.",
    "uninitialized-storage": "Uninitialized storage variables can override critical state variables, leading to security risks.",
    "unprotected-upgrade": "Unprotected upgradeable contracts can be destructed, leading to loss of functionality.",
    "arbitrary-send-erc20-permit": "Allows arbitrary addresses to be specified in transferFrom with permit, enabling unauthorized token transfers.",
    "arbitrary-send-eth": "Unprotected calls to functions sending Ether to arbitrary addresses can lead to unauthorized fund transfers.",
    "controlled-array-length": "Direct assignment of array lengths can allow users to control storage slots, leading to security risks.",
    "controlled-delegatecall": "Delegatecall to user-controlled addresses can lead to unintended behavior and potential security risks.",
    "delegatecall-loop": "Delegatecall inside a loop in payable functions can lead to multiple credits of the same msg.value.",
    "incorrect-exp": "Use of bitwise XOR instead of exponential operator can lead to incorrect calculations.",
    "incorrect-return": "Incorrect return statements in assembly can halt execution unexpectedly.",
    "msg-value-loop": "Use of msg.value inside a loop can lead to unintended behavior and potential security risks.",
    "reentrancy-eth": "Reentrancy vulnerabilities can allow attackers to recursively call back into your contract, draining funds or manipulating state.",
    "return-leave": "Incorrect use of return instead of leave in assembly can halt execution unexpectedly.",
    "storage-array": "Compiler bug in Solidity versions 0.4.7-0.5.9 can lead to incorrect values in signed integer arrays.",
    "unchecked-transfer": "Unchecked return values of external transfer calls can lead to silent failures and accounting errors.",
    "weak-prng": "Weak PRNGs can be manipulated by miners, leading to predictable random values and potential security risks.",
    "codex": "Use codex to find vulnerabilities and review its messages for potential security risks.",
    "domain-separator-collision": "Function signature collisions with EIP-2612's DOMAIN_SEPARATOR can lead to unintended behavior for contracts using permit functionality.",
    "enum-conversion": "Out-of-range enum conversions can lead to unexpected behavior and potential security risks.",
    "erc20-interface": "Incorrect return values for ERC20 functions can lead to failed executions and potential security risks.",
    "erc721-interface": "Incorrect return values for ERC721 functions can lead to failed executions and potential security risks.",
    "incorrect-equality": "Strict equalities can be easily manipulated by attackers, leading to unintended behavior.",
    "locked-ether": "Contracts with payable functions but without withdrawal capabilities can lock Ether permanently.",
    "mapping-deletion": "Deletion of mappings containing structures does not delete the mapping, leading to potential security risks.",
    "pyth-deprecated-functions": "Use of deprecated Pyth functions can lead to unintended behavior and potential security risks.",
    "pyth-unchecked-confidence": "Unchecked confidence levels of Pyth prices can lead to incorrect data usage and potential security risks.",
    "pyth-unchecked-publishtime": "Unchecked publishTime of Pyth prices can lead to incorrect data usage and potential security risks.",
    "shadowing-abstract": "State variable shadowing from abstract contracts can lead to incorrect state management and potential security risks.",
    "tautological-compare": "Tautological comparisons always return true or false, leading to potential logic errors.",
    "tautology": "Tautologies or contradictions in code can lead to unintended behavior and potential security risks.",
    "write-after-write": "Variables written but never read and then written again can lead to inefficient code and potential security risks.",
    "boolean-cst": "Misuse of boolean constants can lead to incorrect logic and potential security risks.",
    "chronicle-unchecked-price": "Unchecked prices from Chronicle oracles can lead to incorrect data usage and potential security risks.",
    "constant-function-asm": "Constant functions using assembly code can lead to failed executions in Solidity versions 0.5 and above.",
    "constant-function-state": "Constant functions changing state can lead to failed executions in Solidity versions 0.5 and above.",
    "divide-before-multiply": "Dividing before multiplying can lead to precision loss and potential security risks.",
    "gelato-unprotected-randomness": "Unprotected calls to _requestRandomness can lead to unauthorized randomness requests and potential security risks.",
    "out-of-order-retryable": "Out-of-order retryable transactions can lead to unintended behavior and potential security risks.",
    "reentrancy-no-eth": "Reentrancy vulnerabilities not involving Ether can still lead to manipulation of contract state.",
    "reused-constructor": "Reused base constructors can lead to unintended behavior and potential security risks.",
    "tx-origin": "Use of tx.origin for authorization can be abused by malicious contracts, leading to potential security risks.",
    "unchecked-lowlevel": "Unchecked return values of low-level calls can lead to silent failures and potential security risks.",
    "unchecked-send": "Unchecked return values of send calls can lead to silent failures and potential security risks.",
    "uninitialized-local": "Uninitialized local variables can lead to unexpected behavior and potential security risks.",
    "unused-return": "Unused return values of function calls can lead to inefficient code and potential security risks.",
    "chainlink-feed-registry": "Use of Chainlink Feed Registry outside of Ethereum Mainnet can lead to failed executions.",
    "incorrect-modifier": "Modifiers that do not execute _ or revert can lead to misleading function returns and potential security risks.",
    "optimism-deprecation": "Use of deprecated Optimism predeploys or functions can lead to failed executions and potential security risks.",
    "shadowing-builtin": "Shadowing built-in symbols can lead to unexpected behavior and potential security risks.",
    "shadowing-local": "Shadowing local variables can lead to incorrect variable usage and potential security risks.",
    "uninitialized-fptr-cst": "Uninitialized function pointers in constructors can lead to unexpected behavior and potential security risks.",
    "variable-scope": "Pre-declaration usage of local variables can lead to incorrect variable usage and potential security risks.",
    "void-cst": "Calls to unimplemented constructors can lead to unintended behavior and potential security risks.",
    "calls-loop": "Calls inside a loop can lead to denial-of-service attacks and potential security risks.",
    "events-access": "Missing events for critical access control parameters can lead to difficulties in tracking changes off-chain.",
    "events-maths": "Missing events for critical arithmetic parameters can lead to difficulties in tracking changes off-chain.",
    "incorrect-unary": "Unary expressions such as x=+1 are likely typos and can lead to incorrect calculations.",
    "missing-zero-check": "Missing zero address validation can lead to unintended behavior and potential security risks.",
    "reentrancy-benign": "Benign reentrancy vulnerabilities can still lead to unintended behavior and potential security risks.",
    "reentrancy-events": "Reentrancy vulnerabilities that manipulate events can lead to incorrect event data and potential security risks.",
    "return-bomb": "Low-level callees consuming all caller gas can lead to out-of-gas errors and potential security risks.",
    "timestamp": "Use of block.timestamp can be manipulated by miners, leading to potential security risks.",
    "assembly": "Use of assembly is error-prone and can lead to potential security risks.",
    "assert-state-change": "Incorrect use of assert() for state changes can lead to potential security risks.",
    "boolean-equal": "Comparison to boolean constants is unnecessary and can lead to potential logic errors.",
    "cyclomatic-complexity": "High cyclomatic complexity can lead to difficult-to-maintain code and potential security risks.",
    "deprecated-standards": "Use of deprecated standards can lead to potential security risks and failed executions.",
    "erc20-indexed": "Missing indexed keyword in ERC20 events can lead to difficulties in tracking events off-chain.",
    "function-init-state": "Immediate initialization of state variables through function calls can lead to incorrect state management.",
    "incorrect-using-for": "Incorrect using-for statements can lead to confusion and potential security risks.",
    "low-level-calls": "Low-level calls do not check for code existence or call success, leading to potential security risks.",
    "missing-inheritance": "Missing inheritance can lead to potential security risks and failed executions.",
    "naming-convention": "Non-conformance to Solidity naming conventions can lead to difficulties in code maintenance.",
    "pragma": "Use of different Solidity versions can lead to potential security risks and failed executions.",
    "redundant-statements": "Redundant statements can lead to inefficient code and potential security risks.",
    "solc-version": "Use of outdated Solidity versions can lead to potential security risks and failed executions.",
    "unimplemented-functions": "Unimplemented functions can lead to failed executions and potential security risks.",
    "unused-state": "Unused state variables can lead to inefficient code and potential security risks.",
    "costly-loop": "Costly operations inside a loop can lead to gas inefficiencies and potential out-of-gas errors.",
    "dead-code": "Unused functions can lead to difficulties in code maintenance and potential security risks.",
    "reentrancy-unlimited-gas": "Reentrancy vulnerabilities based on transfer or send can lead to potential security risks.",
    "too-many-digits": "Literals with many digits can lead to difficulties in code readability and potential errors.",
    "cache-array-length": "Caching array lengths in for loops can lead to gas savings and improved efficiency.",
    "constable-states": "State variables that can be declared constant should be to save gas and improve efficiency.",
    "external-function": "Public functions that are never called by the contract should be declared external to save gas.",
    "immutable-states": "State variables that can be declared immutable should be to save gas and improve efficiency.",
    "var-read-using-this": "Reading contract variables using this can lead to unnecessary STATICCALL overhead and gas inefficiencies."
};